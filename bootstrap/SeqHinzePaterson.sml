(*   Sequences based on 2-3 finger trees,
 * as suggested in [Hinze & Paterson, 2006]
 *
 *
 * [Hinze & Paterson, 2006]
 *   Ralf Hinze and Ross Paterson,
 *   "Finger trees: a simple general-purpose data structure"
 *   Journal of Functional Programming 16:2 (2006) pp 197-217
 *   http://www.soi.city.ac.uk/~ross/papers/FingerTree.html
 *)
structure Seq =
struct
datatype 'a t =
         E
       | S of 'a ttt
       | D of 'a ttt digit * 'a t * 'a ttt digit
     (* ttt: two-three-tree *)
     and 'a ttt =
         N of 'a
       | B2 of 'a ttt * 'a ttt
       | B3 of 'a ttt * 'a ttt * 'a ttt
     and 'a digit =
         One of 'a
       | Two of 'a * 'a
       | Three of 'a * 'a * 'a
       | Four of 'a * 'a * 'a * 'a

val empty = E
fun null E = true
  | null _ = false

fun consDigit (x, xs) =
    case xs of
      One a => Two (x, a)
    | Two (a, b) => Three (x, a, b)
    | Three (a, b, c) => Four (x, a, b, c)
    | Four _ => die "Seq.consDigit: got Four"

fun snocDigit (xs, x) =
    case xs of
      One a => Two (a, x)
    | Two (a, b) => Three (a, b, x)
    | Three (a, b, c) => Four (a, b, c, x)
    | Four _ => die "Seq.snocDigit: got Four"

fun consTree (x, xs) =
    case xs of
      E   => S x
    | S y => D (One x, E, One y)
    | D (Four (a, b, c, d), mid, suf) =>
      D (Two (x, a), consTree (B3 (b, c, d), mid), suf)
    | D (pre, mid, suf) => D (consDigit (x, pre), mid, suf)

fun snocTree (xs, x) =
    case xs of
      E   => S x
    | S y => D (One y, E, One x)
    | D (pre, mid, Four (a, b, c, d)) =>
      D (pre, snocTree (mid, B3 (a, b, c)), Two (d, x))
    | D (pre, mid, suf) => D (pre, mid, snocDigit (suf, x))

fun x <| xs = consTree (N x, xs)
fun xs |> x = snocTree (xs, N x)

fun treeToDigit t =
    case t of
      B2 (t1, t2) => Two (t1, t2)
    | B3 (t1, t2, t3) => Three (t1, t2, t3)
    | _ => die "Seq.treeToDigit: got a node"

fun getl' xs =
    case xs of
      E => NONE
    | S x => SOME (x, E)
    | D (pre, mid, suf) =>
      case pre of
        Four (x, a, b, c) => SOME (x, D (Three (a, b, c), mid, suf))
      | Three (x, a, b) => SOME (x, D (Two (a, b), mid, suf))
      | Two (x, a) => SOME (x, D (One a, mid, suf))
      | One x =>
        SOME
          (x,
           case getl' mid of
             NONE => flattenSuf suf
           | SOME (t, mid) => D (treeToDigit t, mid, suf)
          )
and flattenSuf xs =
    case xs of
      One a => S a
    | Two (a, b) => D (One a, E, One b)
    | Three (a, b, c) => D (Two (a, b), E, One c)
    | Four (a, b, c, d) => D (Three (a, b, c), E, One d)

fun getr' xs =
    case xs of
      E => NONE
    | S x => SOME (x, E)
    | D (pre, mid, suf) =>
      case suf of
        Four (a, b, c, x) => SOME (x, D (pre, mid, Three (a, b, c)))
      | Three (a, b, x) => SOME (x, D (pre, mid, Two (a, b)))
      | Two (a, x) => SOME (x, D (pre, mid, One a))
      | One x =>
        SOME
          (x,
           case getr' mid of
             NONE => flattenPre pre
           | SOME (t, mid) => D (pre, mid, treeToDigit t)
          )
and flattenPre xs =
    case xs of
      One a => S a
    | Two (a, b) => D (One a, E, One b)
    | Three (a, b, c) => D (One a, E, Two (b, c))
    | Four (a, b, c, d) => D (One a, E, Three (b, c, d))

fun getl xs =
    case getl' xs of
      NONE => NONE
    | SOME (N x, xs) => SOME (x, xs)
    | _ => die "Seq.viewl: got a branch"

fun getr xs =
    case getr' xs of
      NONE => NONE
    | SOME (N x, xs) => SOME (x, xs)
    | _ => die "Seq.viewr: got a branch"

(* Auto-generated by: GenSeqApp.sml *)
fun app0 (E, ys) = ys
  | app0 (xs, E) = xs
  | app0 (S t, ys) = consTree (t, ys)
  | app0 (xs, S t) = snocTree (xs, t)
  | app0 (D (prl, ml, One v0), D (One v1, mr, sfr)) =
    D (prl, app1 (ml, mr, B2 (v0, v1)), sfr)
  | app0 (D (prl, ml, One v0), D (Two (v1, v2), mr, sfr)) =
    D (prl, app1 (ml, mr, B3 (v0, v1, v2)), sfr)
  | app0 (D (prl, ml, One v0), D (Three (v1, v2, v3), mr, sfr)) =
    D (prl, app2 (ml, mr, B2 (v0, v1), B2 (v2, v3)), sfr)
  | app0 (D (prl, ml, One v0), D (Four (v1, v2, v3, v4), mr, sfr)) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app0 (D (prl, ml, Two (v0, v1)), D (One v2, mr, sfr)) =
    D (prl, app1 (ml, mr, B3 (v0, v1, v2)), sfr)
  | app0 (D (prl, ml, Two (v0, v1)), D (Two (v2, v3), mr, sfr)) =
    D (prl, app2 (ml, mr, B2 (v0, v1), B2 (v2, v3)), sfr)
  | app0 (D (prl, ml, Two (v0, v1)), D (Three (v2, v3, v4), mr, sfr)) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app0 (D (prl, ml, Two (v0, v1)), D (Four (v2, v3, v4, v5), mr, sfr)) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app0 (D (prl, ml, Three (v0, v1, v2)), D (One v3, mr, sfr)) =
    D (prl, app2 (ml, mr, B2 (v0, v1), B2 (v2, v3)), sfr)
  | app0 (D (prl, ml, Three (v0, v1, v2)), D (Two (v3, v4), mr, sfr)) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app0 (D (prl, ml, Three (v0, v1, v2)), D (Three (v3, v4, v5), mr, sfr)) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app0 (D (prl, ml, Three (v0, v1, v2)), D (Four (v3, v4, v5, v6), mr, sfr)) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app0 (D (prl, ml, Four (v0, v1, v2, v3)), D (One v4, mr, sfr)) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app0 (D (prl, ml, Four (v0, v1, v2, v3)), D (Two (v4, v5), mr, sfr)) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app0 (D (prl, ml, Four (v0, v1, v2, v3)), D (Three (v4, v5, v6), mr, sfr)) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app0 (D (prl, ml, Four (v0, v1, v2, v3)), D (Four (v4, v5, v6, v7), mr, sfr)) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
and app1 (E, ys, v0) = consTree (v0, ys)
  | app1 (xs, E, v0) = snocTree (xs, v0)
  | app1 (S t, ys, v0) = consTree (t, consTree (v0, ys))
  | app1 (xs, S t, v0) = snocTree (snocTree (xs, v0), t)
  | app1 (D (prl, ml, One v0), D (One v2, mr, sfr), v1) =
    D (prl, app1 (ml, mr, B3 (v0, v1, v2)), sfr)
  | app1 (D (prl, ml, One v0), D (Two (v2, v3), mr, sfr), v1) =
    D (prl, app2 (ml, mr, B2 (v0, v1), B2 (v2, v3)), sfr)
  | app1 (D (prl, ml, One v0), D (Three (v2, v3, v4), mr, sfr), v1) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app1 (D (prl, ml, One v0), D (Four (v2, v3, v4, v5), mr, sfr), v1) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app1 (D (prl, ml, Two (v0, v1)), D (One v3, mr, sfr), v2) =
    D (prl, app2 (ml, mr, B2 (v0, v1), B2 (v2, v3)), sfr)
  | app1 (D (prl, ml, Two (v0, v1)), D (Two (v3, v4), mr, sfr), v2) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app1 (D (prl, ml, Two (v0, v1)), D (Three (v3, v4, v5), mr, sfr), v2) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app1 (D (prl, ml, Two (v0, v1)), D (Four (v3, v4, v5, v6), mr, sfr), v2) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app1 (D (prl, ml, Three (v0, v1, v2)), D (One v4, mr, sfr), v3) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app1 (D (prl, ml, Three (v0, v1, v2)), D (Two (v4, v5), mr, sfr), v3) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app1 (D (prl, ml, Three (v0, v1, v2)), D (Three (v4, v5, v6), mr, sfr), v3) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app1 (D (prl, ml, Three (v0, v1, v2)), D (Four (v4, v5, v6, v7), mr, sfr), v3) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app1 (D (prl, ml, Four (v0, v1, v2, v3)), D (One v5, mr, sfr), v4) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app1 (D (prl, ml, Four (v0, v1, v2, v3)), D (Two (v5, v6), mr, sfr), v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app1 (D (prl, ml, Four (v0, v1, v2, v3)), D (Three (v5, v6, v7), mr, sfr), v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app1 (D (prl, ml, Four (v0, v1, v2, v3)), D (Four (v5, v6, v7, v8), mr, sfr), v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
and app2 (E, ys, v0, v1) = consTree (v0, consTree (v1, ys))
  | app2 (xs, E, v0, v1) = snocTree (snocTree (xs, v0), v1)
  | app2 (S t, ys, v0, v1) = consTree (t, consTree (v0, consTree (v1, ys)))
  | app2 (xs, S t, v0, v1) = snocTree (snocTree (snocTree (xs, v0), v1), t)
  | app2 (D (prl, ml, One v0), D (One v3, mr, sfr), v1, v2) =
    D (prl, app2 (ml, mr, B2 (v0, v1), B2 (v2, v3)), sfr)
  | app2 (D (prl, ml, One v0), D (Two (v3, v4), mr, sfr), v1, v2) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app2 (D (prl, ml, One v0), D (Three (v3, v4, v5), mr, sfr), v1, v2) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app2 (D (prl, ml, One v0), D (Four (v3, v4, v5, v6), mr, sfr), v1, v2) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app2 (D (prl, ml, Two (v0, v1)), D (One v4, mr, sfr), v2, v3) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app2 (D (prl, ml, Two (v0, v1)), D (Two (v4, v5), mr, sfr), v2, v3) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app2 (D (prl, ml, Two (v0, v1)), D (Three (v4, v5, v6), mr, sfr), v2, v3) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app2 (D (prl, ml, Two (v0, v1)), D (Four (v4, v5, v6, v7), mr, sfr), v2, v3) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app2 (D (prl, ml, Three (v0, v1, v2)), D (One v5, mr, sfr), v3, v4) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app2 (D (prl, ml, Three (v0, v1, v2)), D (Two (v5, v6), mr, sfr), v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app2 (D (prl, ml, Three (v0, v1, v2)), D (Three (v5, v6, v7), mr, sfr), v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app2 (D (prl, ml, Three (v0, v1, v2)), D (Four (v5, v6, v7, v8), mr, sfr), v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app2 (D (prl, ml, Four (v0, v1, v2, v3)), D (One v6, mr, sfr), v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app2 (D (prl, ml, Four (v0, v1, v2, v3)), D (Two (v6, v7), mr, sfr), v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app2 (D (prl, ml, Four (v0, v1, v2, v3)), D (Three (v6, v7, v8), mr, sfr), v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app2 (D (prl, ml, Four (v0, v1, v2, v3)), D (Four (v6, v7, v8, v9), mr, sfr), v4, v5) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7), B2 (v8, v9)), sfr)
and app3 (E, ys, v0, v1, v2) = consTree (v0, consTree (v1, consTree (v2, ys)))
  | app3 (xs, E, v0, v1, v2) = snocTree (snocTree (snocTree (xs, v0), v1), v2)
  | app3 (S t, ys, v0, v1, v2) = consTree (t, consTree (v0, consTree (v1, consTree (v2, ys))))
  | app3 (xs, S t, v0, v1, v2) = snocTree (snocTree (snocTree (snocTree (xs, v0), v1), v2), t)
  | app3 (D (prl, ml, One v0), D (One v4, mr, sfr), v1, v2, v3) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4)), sfr)
  | app3 (D (prl, ml, One v0), D (Two (v4, v5), mr, sfr), v1, v2, v3) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app3 (D (prl, ml, One v0), D (Three (v4, v5, v6), mr, sfr), v1, v2, v3) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app3 (D (prl, ml, One v0), D (Four (v4, v5, v6, v7), mr, sfr), v1, v2, v3) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app3 (D (prl, ml, Two (v0, v1)), D (One v5, mr, sfr), v2, v3, v4) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app3 (D (prl, ml, Two (v0, v1)), D (Two (v5, v6), mr, sfr), v2, v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app3 (D (prl, ml, Two (v0, v1)), D (Three (v5, v6, v7), mr, sfr), v2, v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app3 (D (prl, ml, Two (v0, v1)), D (Four (v5, v6, v7, v8), mr, sfr), v2, v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app3 (D (prl, ml, Three (v0, v1, v2)), D (One v6, mr, sfr), v3, v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app3 (D (prl, ml, Three (v0, v1, v2)), D (Two (v6, v7), mr, sfr), v3, v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app3 (D (prl, ml, Three (v0, v1, v2)), D (Three (v6, v7, v8), mr, sfr), v3, v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app3 (D (prl, ml, Three (v0, v1, v2)), D (Four (v6, v7, v8, v9), mr, sfr), v3, v4, v5) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7), B2 (v8, v9)), sfr)
  | app3 (D (prl, ml, Four (v0, v1, v2, v3)), D (One v7, mr, sfr), v4, v5, v6) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app3 (D (prl, ml, Four (v0, v1, v2, v3)), D (Two (v7, v8), mr, sfr), v4, v5, v6) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app3 (D (prl, ml, Four (v0, v1, v2, v3)), D (Three (v7, v8, v9), mr, sfr), v4, v5, v6) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7), B2 (v8, v9)), sfr)
  | app3 (D (prl, ml, Four (v0, v1, v2, v3)), D (Four (v7, v8, v9, v10), mr, sfr), v4, v5, v6) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8), B2 (v9, v10)), sfr)
and app4 (E, ys, v0, v1, v2, v3) = consTree (v0, consTree (v1, consTree (v2, consTree (v3, ys))))
  | app4 (xs, E, v0, v1, v2, v3) = snocTree (snocTree (snocTree (snocTree (xs, v0), v1), v2), v3)
  | app4 (S t, ys, v0, v1, v2, v3) = consTree (t, consTree (v0, consTree (v1, consTree (v2, consTree (v3, ys)))))
  | app4 (xs, S t, v0, v1, v2, v3) = snocTree (snocTree (snocTree (snocTree (snocTree (xs, v0), v1), v2), v3), t)
  | app4 (D (prl, ml, One v0), D (One v5, mr, sfr), v1, v2, v3, v4) =
    D (prl, app2 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5)), sfr)
  | app4 (D (prl, ml, One v0), D (Two (v5, v6), mr, sfr), v1, v2, v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app4 (D (prl, ml, One v0), D (Three (v5, v6, v7), mr, sfr), v1, v2, v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app4 (D (prl, ml, One v0), D (Four (v5, v6, v7, v8), mr, sfr), v1, v2, v3, v4) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app4 (D (prl, ml, Two (v0, v1)), D (One v6, mr, sfr), v2, v3, v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B2 (v3, v4), B2 (v5, v6)), sfr)
  | app4 (D (prl, ml, Two (v0, v1)), D (Two (v6, v7), mr, sfr), v2, v3, v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app4 (D (prl, ml, Two (v0, v1)), D (Three (v6, v7, v8), mr, sfr), v2, v3, v4, v5) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app4 (D (prl, ml, Two (v0, v1)), D (Four (v6, v7, v8, v9), mr, sfr), v2, v3, v4, v5) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7), B2 (v8, v9)), sfr)
  | app4 (D (prl, ml, Three (v0, v1, v2)), D (One v7, mr, sfr), v3, v4, v5, v6) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7)), sfr)
  | app4 (D (prl, ml, Three (v0, v1, v2)), D (Two (v7, v8), mr, sfr), v3, v4, v5, v6) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app4 (D (prl, ml, Three (v0, v1, v2)), D (Three (v7, v8, v9), mr, sfr), v3, v4, v5, v6) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7), B2 (v8, v9)), sfr)
  | app4 (D (prl, ml, Three (v0, v1, v2)), D (Four (v7, v8, v9, v10), mr, sfr), v3, v4, v5, v6) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8), B2 (v9, v10)), sfr)
  | app4 (D (prl, ml, Four (v0, v1, v2, v3)), D (One v8, mr, sfr), v4, v5, v6, v7) =
    D (prl, app3 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8)), sfr)
  | app4 (D (prl, ml, Four (v0, v1, v2, v3)), D (Two (v8, v9), mr, sfr), v4, v5, v6, v7) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B2 (v6, v7), B2 (v8, v9)), sfr)
  | app4 (D (prl, ml, Four (v0, v1, v2, v3)), D (Three (v8, v9, v10), mr, sfr), v4, v5, v6, v7) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8), B2 (v9, v10)), sfr)
  | app4 (D (prl, ml, Four (v0, v1, v2, v3)), D (Four (v8, v9, v10, v11), mr, sfr), v4, v5, v6, v7) =
    D (prl, app4 (ml, mr, B3 (v0, v1, v2), B3 (v3, v4, v5), B3 (v6, v7, v8), B3 (v9, v10, v11)), sfr)

fun xs >< ys = app0 (xs, ys)
end)
